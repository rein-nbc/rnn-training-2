# -*- coding: utf-8 -*-
"""RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13XJVI6_SJO5WLVdO5uP2qzQ0y_isjAzA
"""

import tensorflow as tf
import os
import json
import argparse
import glob
import numpy as np



def parse_args():
    parser = argparse.ArgumentParser("Entry script to launch inference")
    parser.add_argument("--model-dir", type=str, default = "./model_outputs", help="Path to the model directory")
    return parser.parse_args()

def get_file_content(file_path):
  with open(file_path, "r") as f:
    data = f.read()
  return data


def write_to_file(file_path, content):
  f = open(file_path, "w")
  f.write(content)
  f.close()


def get_text_from_dataset(dir):
  data_paths = glob.glob(os.path.join(dir, "*.txt"))
  def get_text_from_file(file_path):
      # Read, then decode for py2 compat.
      text = open(file_path, 'rb').read().decode(encoding='utf-8')
      return text
  text = ""
  for data_path in data_paths:
      text += get_text_from_file(data_path)
      text += "\n"
  return text

import struct
import base64

def compressConfig(data):
    layers = []
    for layer in data["config"]["layers"]:
        cfg = layer["config"]
        layer_config = None
        if layer["class_name"] == "InputLayer":
            layer_config = {
                "batch_input_shape": cfg["batch_input_shape"]
            }
        elif layer["class_name"] == "Rescaling":
            layer_config = {
                "scale": cfg["scale"],
                "offset": cfg["offset"]
            }
        elif layer["class_name"] == "Dense":
            layer_config = {
                "units": cfg["units"],
                "activation": cfg["activation"]
            }
        elif layer["class_name"] == "Conv2D":
            layer_config = {
                "filters": cfg["filters"],
                "kernel_size": cfg["kernel_size"],
                "strides": cfg["strides"],
                "activation": cfg["activation"],
                "padding": cfg["padding"]
            }
        elif layer["class_name"] == "MaxPooling2D":
            layer_config = {
                "pool_size": cfg["pool_size"],
                "strides": cfg["strides"],
                "padding": cfg["padding"]
            }
        elif layer["class_name"] == "Embedding":
            layer_config = {
                "input_dim": cfg["input_dim"],
                "output_dim": cfg["output_dim"]
            }
        elif layer["class_name"] == "SimpleRNN":
            layer_config = {
                "units": cfg["units"],
                "activation": cfg["activation"]
            }
        elif layer["class_name"] == "LSTM":
            layer_config = {
                "units": cfg["units"],
                "activation": cfg["activation"],
                "recurrent_activation": cfg["recurrent_activation"]
            }
        res_layer = {
            "class_name": layer["class_name"],
        }
        if layer_config is not None:
            res_layer["config"] = layer_config
        layers.append(res_layer)

    return {
        "config": {
            "layers": layers
        }
    }

def get_model_for_export(model):
    weight_np = model.get_weights()

    weight_bytes = bytearray()
    for idx, layer in enumerate(weight_np):
        # write_to_file(os.path.join(model_output_dir, f"model_weight_{idx:02}.txt"), str(layer))
        flatten = layer.reshape(-1).tolist()
        flatten_packed = map(lambda i: struct.pack("@f", i), flatten)
        for i in flatten_packed:
            weight_bytes.extend(i)

    weight_base64 = base64.b64encode(weight_bytes).decode()
    config = json.loads(model.to_json())
    compressed_config = compressConfig(config)
    return weight_base64, compressed_config


def create_dataset_from_text(text, batch_size, seq_length):
  # The unique characters in the file
  vocab = sorted(set(text))

  print(vocab)

  ids_from_chars = tf.keras.layers.StringLookup(vocabulary=list(vocab), mask_token=None)

  chars_from_ids = tf.keras.layers.StringLookup(
      vocabulary=ids_from_chars.get_vocabulary(), invert=True, mask_token=None)

  def text_from_ids(ids):
    return tf.strings.reduce_join(chars_from_ids(ids), axis=-1)

  all_ids = ids_from_chars(tf.strings.unicode_split(text, 'UTF-8'))

  ids_dataset = tf.data.Dataset.from_tensor_slices(all_ids)

  sequences = ids_dataset.batch(seq_length+1, drop_remainder=True)

  def split_input_target(sequence):
      input_text = sequence[:-1]
      target_text = sequence[1:]
      return input_text, target_text

  dataset = sequences.map(split_input_target)

  # Buffer size to shuffle the dataset
  # (TF data is designed to work with possibly infinite sequences,
  # so it doesn't attempt to shuffle the entire sequence in memory. Instead,
  # it maintains a buffer in which it shuffles elements).
  BUFFER_SIZE = 10000

  dataset = (
      dataset
      .shuffle(BUFFER_SIZE)
      .batch(batch_size, drop_remainder=True)
      .prefetch(tf.data.experimental.AUTOTUNE))
  
  return dataset, chars_from_ids, ids_from_chars, text_from_ids



def generate_charactor(prompt, vocab, model, seq_length = 40, to_generate = 10):
    ids_from_chars = tf.keras.layers.StringLookup(vocabulary=list(vocab), mask_token=None)

    chars_from_ids = tf.keras.layers.StringLookup(
        vocabulary=ids_from_chars.get_vocabulary(), invert=True, mask_token=None)

    input_chars = list(prompt)
    input_chars = input_chars[-seq_length:]
    for i in range(seq_length - len(input_chars)):
        input_chars.insert(0, np.random.choice(vocab[1:]))
    prediction_output = []

    temperature = 1.0
    for i in range(to_generate):
        print(input_chars)
        input_ids = ids_from_chars([input_chars])

        prediction_input = np.array(input_ids).reshape(1, seq_length)
        prediction_logits = model.predict(prediction_input)

        prediction_logits = prediction_logits / temperature

        predicted_ids = tf.random.categorical(prediction_logits, num_samples=1)
        prediction = tf.squeeze(predicted_ids, axis=-1)
        # print(prediction)

        prediction_output.append(vocab[prediction[0]])
        input_chars = input_chars[1:] + [vocab[prediction[0]]]

    return prediction_output



def train_model(model, dataset, checkpoint_dir, epochs):
  # Name of the checkpoint files
  checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}")

  checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
      filepath=checkpoint_prefix,
      save_weights_only=True
  )

  model.fit(dataset, epochs=epochs, callbacks=[checkpoint_callback])


def main():
    args = parse_args()
    model_dir = args.model_dir

    ckpt = os.path.join(model_dir, "model.h5")
    model_config = os.path.join(model_dir, "model.json")
    with open(model_config, "r") as f:
        config = json.load(f)
    vocab = config["vocabulary"]

    config["seq_length"] = 20
    
    temperature = 0.7
    prompt = 'contract'
    
    
    model = tf.keras.models.load_model(ckpt)
    print(model.summary())
    generated_chars = generate_charactor(prompt, vocab, model, seq_length = config["seq_length"], to_generate = 1000)

    print(prompt + ''.join(generated_chars))
    

if __name__ == "__main__":
    main()